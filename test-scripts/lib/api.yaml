# trunk-ignore-all(checkov/CKV_OPENAPI_4)
# trunk-ignore-all(checkov/CKV_OPENAPI_5)
openapi: 3.0.0
paths:
  /:
    get:
      operationId: healthCheck
      summary: Health check endpoint
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - root
  /teapot:
    get:
      operationId: teapot
      summary: Tip me over and pour me out
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - root
  /clearTempFiles:
    put:
      operationId: clearTempFiles
      summary: Trigger the removal of CSVs job
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - root
  /listings:
    get:
      operationId: list
      summary: Get a paginated set of listings
      parameters:
        - name: page
          required: false
          in: query
          example: 1
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          schema:
            default: 10
            type: number
        - name: filter
          required: false
          in: query
          example:
            $comparison: "="
            status: active
          schema:
            # trunk-ignore(checkov/CKV_OPENAPI_21)
            type: array
            items:
              $ref: "#/components/schemas/ListingFilterParams"
        - name: view
          required: false
          in: query
          example: full
          schema:
            $ref: "#/components/schemas/ListingViews"
        - name: orderBy
          required: false
          in: query
          example: '["updatedAt"]'
          schema:
            $ref: "#/components/schemas/ListingOrderByKeys"
        - name: orderDir
          required: false
          in: query
          example: '["desc"]'
          schema:
            $ref: "#/components/schemas/OrderByEnum"
        - name: search
          required: false
          in: query
          example: search
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedListingDto"
      tags:
        - listings
    post:
      operationId: create
      summary: Create listing
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
      tags:
        - listings
    delete:
      operationId: delete
      summary: Delete listing by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
      tags:
        - listings
  /listings/combined:
    get:
      operationId: listCombined
      summary: List all local and external listings
      parameters:
        - name: page
          required: false
          in: query
          example: 1
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          schema:
            default: 10
            type: number
        - name: filter
          required: false
          in: query
          example:
            $comparison: "="
            status: active
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ListingFilterParams"
        - name: view
          required: false
          in: query
          example: full
          schema:
            $ref: "#/components/schemas/ListingViews"
        - name: orderBy
          required: false
          in: query
          example: '["updatedAt"]'
          schema:
            $ref: "#/components/schemas/ListingOrderByKeys"
        - name: orderDir
          required: false
          in: query
          example: '["desc"]'
          schema:
            $ref: "#/components/schemas/OrderByEnum"
        - name: search
          required: false
          in: query
          example: search
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - listings
  /listings/csv:
    get:
      operationId: listAsCsv
      summary: Get listings and units as zip
      parameters:
        - name: timeZone
          required: false
          in: query
          example: America/Los_Angeles
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - listings
  /listings/external/{id}:
    get:
      operationId: externalRetrieve
      summary: Get listing for external consumption by id
      parameters:
        - name: language
          required: true
          in: header
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: view
          required: false
          in: query
          example: full
          schema:
            $ref: "#/components/schemas/ListingViews"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: string
      tags:
        - listings
  /listings/{id}:
    get:
      operationId: retrieve
      summary: Get listing by id
      parameters:
        - name: language
          required: true
          in: header
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: view
          required: false
          in: query
          example: full
          schema:
            $ref: "#/components/schemas/ListingViews"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
      tags:
        - listings
    put:
      operationId: update
      summary: Update listing by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
      tags:
        - listings
  /listings/duplicate:
    post:
      operationId: duplicate
      summary: Duplicate listing
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingDuplicate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Listing"
      tags:
        - listings
  /listings/closeListings:
    put:
      operationId: process
      summary: Trigger the listing process job
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - listings
  /listings/byMultiselectQuestion/{multiselectQuestionId}:
    get:
      operationId: retrieveListings
      summary: Get listings by multiselect question id
      parameters:
        - name: multiselectQuestionId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IdDTO"
      tags:
        - listings
  /applicationFlaggedSets:
    get:
      operationId: list
      summary: List application flagged sets
      parameters:
        - name: page
          required: false
          in: query
          example: 1
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          schema:
            default: 10
            type: number
        - name: listingId
          required: true
          in: query
          schema:
            type: string
        - name: view
          required: false
          in: query
          example: pending
          schema:
            $ref: "#/components/schemas/AfsView"
        - name: search
          required: false
          in: query
          example: search
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedAfsDto"
      tags:
        - applicationFlaggedSets
  /applicationFlaggedSets/meta:
    get:
      operationId: meta
      summary: Meta information for application flagged sets
      parameters:
        - name: page
          required: false
          in: query
          example: 1
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          schema:
            default: 10
            type: number
        - name: listingId
          required: true
          in: query
          schema:
            type: string
        - name: view
          required: false
          in: query
          example: pending
          schema:
            $ref: "#/components/schemas/AfsView"
        - name: search
          required: false
          in: query
          example: search
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AfsMeta"
      tags:
        - applicationFlaggedSets
  /applicationFlaggedSets/{afsId}:
    get:
      operationId: retrieve
      summary: Retrieve application flagged set by id
      parameters:
        - name: afsId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationFlaggedSet"
      tags:
        - applicationFlaggedSets
    put:
      operationId: resetConfirmationAlert
      summary: Reset flagged set confirmation alert
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - applicationFlaggedSets
  /applicationFlaggedSets/resolve:
    post:
      operationId: resolve
      summary: Resolve application flagged set
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AfsResolve"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationFlaggedSet"
      tags:
        - applicationFlaggedSets
  /applicationFlaggedSets/process:
    put:
      operationId: process
      summary: Trigger the duplicate check process
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - applicationFlaggedSets
  /applicationFlaggedSets/process_duplicates:
    put:
      operationId: processDuplicates
      summary: Trigger the duplicate check process
      parameters:
        - name: listingId
          required: false
          in: query
          schema:
            type: string
        - name: force
          required: false
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - applicationFlaggedSets
  /amiCharts:
    get:
      operationId: list
      summary: List amiCharts
      parameters:
        - name: jurisdictionId
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AmiChart"
      tags:
        - amiCharts
    post:
      operationId: create
      summary: Create amiChart
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AmiChartCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AmiChart"
      tags:
        - amiCharts
    delete:
      operationId: delete
      summary: Delete amiChart by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - amiCharts
  /amiCharts/{amiChartId}:
    get:
      operationId: retrieve
      summary: Get amiChart by id
      parameters:
        - name: amiChartId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AmiChart"
      tags:
        - amiCharts
    put:
      operationId: update
      summary: Update amiChart
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AmiChartUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AmiChart"
      tags:
        - amiCharts
  /reservedCommunityTypes:
    get:
      operationId: list
      summary: List reservedCommunityTypes
      parameters:
        - name: jurisdictionId
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReservedCommunityType"
      tags:
        - reservedCommunityTypes
    post:
      operationId: create
      summary: Create reservedCommunityType
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservedCommunityTypeCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservedCommunityType"
      tags:
        - reservedCommunityTypes
    delete:
      operationId: delete
      summary: Delete reservedCommunityType by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - reservedCommunityTypes
  /reservedCommunityTypes/{reservedCommunityTypeId}:
    get:
      operationId: retrieve
      summary: Get reservedCommunityType by id
      parameters:
        - name: reservedCommunityTypeId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservedCommunityType"
      tags:
        - reservedCommunityTypes
    put:
      operationId: update
      summary: Update reservedCommunityType
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReservedCommunityTypeUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReservedCommunityType"
      tags:
        - reservedCommunityTypes
  /unitTypes:
    get:
      operationId: list
      summary: List unitTypes
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitType"
      tags:
        - unitTypes
    post:
      operationId: create
      summary: Create unitType
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitTypeCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitType"
      tags:
        - unitTypes
    delete:
      operationId: delete
      summary: Delete unitType by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - unitTypes
  /unitTypes/{unitTypeId}:
    get:
      operationId: retrieve
      summary: Get unitType by id
      parameters:
        - name: unitTypeId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitType"
      tags:
        - unitTypes
    put:
      operationId: update
      summary: Update unitType
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitTypeUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitType"
      tags:
        - unitTypes
  /unitAccessibilityPriorityTypes:
    get:
      operationId: list
      summary: List unitAccessibilityPriorityTypes
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitAccessibilityPriorityType"
      tags:
        - unitAccessibilityPriorityTypes
    post:
      operationId: create
      summary: Create unitAccessibilityPriorityType
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitAccessibilityPriorityTypeCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitAccessibilityPriorityType"
      tags:
        - unitAccessibilityPriorityTypes
    delete:
      operationId: delete
      summary: Delete unitAccessibilityPriorityType by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - unitAccessibilityPriorityTypes
  /unitAccessibilityPriorityTypes/{unitAccessibilityPriorityTypeId}:
    get:
      operationId: retrieve
      summary: Get unitAccessibilityPriorityType by id
      parameters:
        - name: unitAccessibilityPriorityTypeId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitAccessibilityPriorityType"
      tags:
        - unitAccessibilityPriorityTypes
    put:
      operationId: update
      summary: Update unitAccessibilityPriorityType
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitAccessibilityPriorityTypeUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitAccessibilityPriorityType"
      tags:
        - unitAccessibilityPriorityTypes
  /unitRentTypes:
    get:
      operationId: list
      summary: List unitRentTypes
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UnitRentType"
      tags:
        - unitRentTypes
    post:
      operationId: create
      summary: Create unitRentType
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitRentTypeCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitRentType"
      tags:
        - unitRentTypes
    delete:
      operationId: delete
      summary: Delete unitRentType by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - unitRentTypes
  /unitRentTypes/{unitRentTypeId}:
    get:
      operationId: retrieve
      summary: Get unitRentType by id
      parameters:
        - name: unitRentTypeId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitRentType"
      tags:
        - unitRentTypes
    put:
      operationId: update
      summary: Update unitRentType
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UnitRentTypeUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitRentType"
      tags:
        - unitRentTypes
  /jurisdictions:
    get:
      operationId: list
      summary: List jurisdictions
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Jurisdiction"
      tags:
        - jurisdictions
    post:
      operationId: create
      summary: Create jurisdiction
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JurisdictionCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jurisdiction"
      tags:
        - jurisdictions
    delete:
      operationId: delete
      summary: Delete jurisdiction by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - jurisdictions
  /jurisdictions/{jurisdictionId}:
    get:
      operationId: retrieve
      summary: Get jurisdiction by id
      parameters:
        - name: jurisdictionId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jurisdiction"
      tags:
        - jurisdictions
    put:
      operationId: update
      summary: Update jurisdiction
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JurisdictionUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jurisdiction"
      tags:
        - jurisdictions
  /jurisdictions/byName/{jurisdictionName}:
    get:
      operationId: retrieveByName
      summary: Get jurisdiction by name
      parameters:
        - name: jurisdictionName
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Jurisdiction"
      tags:
        - jurisdictions
  /multiselectQuestions:
    get:
      operationId: list
      summary: List multiselect questions
      parameters:
        - name: filter
          required: false
          in: query
          example:
            $comparison: "="
            applicationSection: programs
          schema:
            type: array
            items:
              $ref: "#/components/schemas/MultiselectQuestionFilterParams"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MultiselectQuestion"
      tags:
        - multiselectQuestions
    post:
      operationId: create
      summary: Create multiselect question
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MultiselectQuestionCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiselectQuestion"
      tags:
        - multiselectQuestions
    delete:
      operationId: delete
      summary: Delete multiselect question by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - multiselectQuestions
  /multiselectQuestions/{multiselectQuestionId}:
    get:
      operationId: retrieve
      summary: Get multiselect question by id
      parameters:
        - name: multiselectQuestionId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiselectQuestion"
      tags:
        - multiselectQuestions
    put:
      operationId: update
      summary: Update multiselect question
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MultiselectQuestionUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiselectQuestion"
      tags:
        - multiselectQuestions
  /applications:
    get:
      operationId: list
      summary: Get a paginated set of applications
      parameters:
        - name: page
          required: false
          in: query
          example: 1
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          schema:
            default: 10
            type: number
        - name: listingId
          required: false
          in: query
          example: listingId
          schema:
            type: string
        - name: search
          required: false
          in: query
          example: search
          schema:
            type: string
        - name: userId
          required: false
          in: query
          example: userId
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          example: createdAt
          schema:
            $ref: "#/components/schemas/ApplicationOrderByKeys"
        - name: order
          required: false
          in: query
          example: DESC
          schema:
            $ref: "#/components/schemas/OrderByEnum"
        - name: markedAsDuplicate
          required: false
          in: query
          example: true
          schema:
            type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedApplicationDto"
      tags:
        - applications
    post:
      operationId: create
      summary: Create application (used by partners to hand create an application)
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
      tags:
        - applications
    delete:
      operationId: delete
      summary: Delete application by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - applications
  /applications/mostRecentlyCreated:
    get:
      operationId: mostRecentlyCreated
      summary: Get the most recent application submitted by the user
      parameters:
        - name: userId
          required: true
          in: query
          example: userId
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
      tags:
        - applications
  /applications/publicAppsView:
    get:
      operationId: publicAppsView
      summary: Get public applications info
      parameters:
        - name: userId
          required: true
          in: query
          example: userId
          schema:
            type: string
        - name: filterType
          required: false
          in: query
          example: all
          schema:
            $ref: "#/components/schemas/ApplicationsFilterEnum"
        - name: includeLotteryApps
          required: false
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicAppsViewResponse"
      tags:
        - applications
  /applications/csv:
    get:
      operationId: listAsCsv
      summary: Get applications as csv
      parameters:
        - name: id
          required: true
          in: query
          schema:
            type: string
        - name: includeDemographics
          required: false
          in: query
          example: true
          schema:
            type: boolean
        - name: timeZone
          required: false
          in: query
          example: America/Los_Angeles
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - applications
  /applications/spreadsheet:
    get:
      operationId: listAsSpreadsheet
      summary: Get applications as spreadsheet
      parameters:
        - name: id
          required: true
          in: query
          schema:
            type: string
        - name: includeDemographics
          required: false
          in: query
          example: true
          schema:
            type: boolean
        - name: timeZone
          required: false
          in: query
          example: America/Los_Angeles
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - applications
  /applications/{applicationId}:
    get:
      operationId: retrieve
      summary: Get application by id
      parameters:
        - name: applicationId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
      tags:
        - applications
    put:
      operationId: update
      summary: Update application by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
      tags:
        - applications
  /applications/submit:
    post:
      operationId: submit
      summary: Submit application (used by applicants applying to a listing)
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"
      tags:
        - applications
  /applications/verify:
    post:
      operationId: submissionValidation
      summary: Verify application can be saved
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - applications
  /asset:
    post:
      operationId: create
      summary: Create asset
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetCreate"
      responses:
        "201":
          description: ""
      tags:
        - asset
      security:
        - bearer: []
    get:
      operationId: list
      summary: List assets
      parameters:
        - name: page
          required: false
          in: query
          example: 1
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          schema:
            default: 10
            type: number
      responses:
        "200":
          description: ""
      tags:
        - asset
      security:
        - bearer: []
  /asset/upload:
    post:
      operationId: upload
      summary: Upload asset
      parameters: []
      responses:
        "201":
          description: ""
      tags:
        - asset
      security:
        - bearer: []
  /asset/presigned-upload-metadata:
    post:
      operationId: createPresignedUploadMetadata
      summary: Create presigned upload metadata
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePresignedUploadMetadata"
      responses:
        "201":
          description: ""
      tags:
        - asset
      security:
        - bearer: []
  /asset/{assetId}:
    get:
      operationId: retrieve
      summary: Get asset by id
      parameters:
        - name: assetId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - asset
      security:
        - bearer: []
  /user:
    get:
      operationId: profile
      summary: Get a user from cookies
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - user
    delete:
      operationId: delete
      summary: Delete user by id
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - user
    post:
      operationId: create
      summary: Creates a public only user
      parameters:
        - name: noWelcomeEmail
          required: false
          in: query
          example: true
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - user
  /user/list:
    get:
      operationId: list
      summary: Get a paginated set of users
      parameters:
        - name: page
          required: false
          in: query
          example: 1
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          example: 10
          schema:
            default: 10
            type: number
        - name: filter
          required: false
          in: query
          example:
            isPartner: true
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UserFilterParams"
        - name: search
          required: false
          in: query
          example: search
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUserDto"
      tags:
        - user
  /user/csv:
    get:
      operationId: listAsCsv
      summary: List users in CSV
      parameters: []
      responses:
        "200":
          description: ""
      tags:
        - user
  /user/{id}:
    get:
      operationId: retrieve
      summary: Get user by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - user
    put:
      operationId: update
      summary: Update user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - user
  /user/forgot-password:
    put:
      operationId: forgotPassword
      summary: Forgot Password
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailAndAppUrl"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - user
  /user/invite:
    post:
      operationId: invite
      summary: Invite partner user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInvite"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
      tags:
        - user
  /user/request-single-use-code:
    post:
      operationId: requestSingleUseCode
      summary: Request single use code
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestSingleUseCode"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - user
  /user/resend-confirmation:
    post:
      operationId: resendConfirmation
      summary: Resend public confirmation
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailAndAppUrl"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - user
  /user/resend-partner-confirmation:
    post:
      operationId: resendPartnerConfirmation
      summary: Resend partner confirmation
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailAndAppUrl"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - user
  /user/is-confirmation-token-valid:
    post:
      operationId: isUserConfirmationTokenValid
      summary: Verifies token is valid
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmationRequest"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - user
  /auth/login:
    post:
      operationId: login
      summary: Login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - auth
  /auth/loginViaSingleUseCode:
    post:
      operationId: login via a single use code
      summary: LoginViaSingleUseCode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginViaSingleUseCode"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - auth
  /auth/logout:
    get:
      operationId: logout
      summary: Logout
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - auth
  /auth/request-mfa-code:
    post:
      operationId: requestMfaCode
      summary: Request mfa code
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestMfaCode"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestMfaCodeResponse"
      tags:
        - auth
  /auth/requestNewToken:
    get:
      operationId: requestNewToken
      summary: Requests a new token given a refresh token
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - auth
  /auth/update-password:
    put:
      operationId: update-password
      summary: Update Password
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePassword"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - auth
  /auth/confirm:
    put:
      operationId: confirm
      summary: Confirm email
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Confirm"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - auth
  /mapLayers:
    get:
      operationId: list
      summary: List map layers
      parameters:
        - name: jurisdictionId
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MapLayerDto"
      tags:
        - mapLayers
  /scriptRunner/exampleScript:
    put:
      operationId: exampleScript
      summary: An example of how the script runner can work
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - scriptRunner
  /scriptRunner/transferJurisdictionData:
    put:
      operationId: transferJurisdictionData
      summary: A script that pulls data from one source into the current db
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataTransferDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - scriptRunner
  /scriptRunner/transferJurisdictionListingsData:
    put:
      operationId: transferJurisdictionListingsData
      summary: A script that pulls data from one source into the current db
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DataTransferDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - scriptRunner
  /scriptRunner/amiChartImport:
    put:
      operationId: amiChartImport
      summary: >-
        A script that takes in a standardized string and outputs the input for
        the ami chart create endpoint
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AmiChartImportDTO"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - scriptRunner
  /scriptRunner/lotteryTranslations:
    put:
      operationId: lotteryTranslations
      summary: A script that adds lottery translations to the db
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - scriptRunner
  /scriptRunner/lotteryTranslationsCreateIfEmpty:
    put:
      operationId: lotteryTranslations
      summary: >-
        A script that adds lottery translations to the db and creates them if it
        does not exist
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - scriptRunner
  /scriptRunner/optOutExistingLotteries:
    put:
      operationId: optOutExistingLotteries
      summary: A script that opts out existing lottery listings
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - scriptRunner
  /lottery/generateLotteryResults:
    put:
      operationId: lotteryGenerate
      summary: Generate the lottery results for a listing
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationCsvQueryParams"
      responses:
        "200":
          description: ""
      tags:
        - lottery
  /lottery/getLotteryResults:
    get:
      operationId: lotteryResults
      summary: Get applications lottery results
      parameters:
        - name: id
          required: true
          in: query
          schema:
            type: string
        - name: includeDemographics
          required: false
          in: query
          example: true
          schema:
            type: boolean
        - name: timeZone
          required: false
          in: query
          example: America/Los_Angeles
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - lottery
  /lottery/lotteryStatus:
    put:
      operationId: lotteryStatus
      summary: Change the listing lottery status
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListingLotteryStatus"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - lottery
  /lottery/lotteryActivityLog/{id}:
    get:
      operationId: lotteryActivityLog
      summary: Get a lottery activity log
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LotteryActivityLogItem"
      tags:
        - lottery
  /lottery/autoPublishResults:
    put:
      operationId: autoPublishResults
      summary: Trigger the lottery auto publish process job
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - lottery
  /lottery/expireLotteries:
    put:
      operationId: expireLotteries
      summary: Trigger the lottery expiration process job
      parameters: []
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessDTO"
      tags:
        - lottery
  /lottery/publicLotteryResults/{id}:
    get:
      operationId: publicLotteryResults
      summary: Get lottery results by application id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicLotteryResult"
      tags:
        - lottery
  /lottery/lotteryTotals/{id}:
    get:
      operationId: lotteryTotals
      summary: Get lottery totals by listing id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicLotteryTotal"
      tags:
        - lottery
info:
  title: Bloom API
  description: The API for Bloom
  version: "2.0"
  contact: {}
tags:
  - name: listings
    description: ""
servers: []
components:
  schemas:
    SuccessDTO:
      type: object
      properties:
        success:
          type: boolean
      required:
        - success
    ListingViews:
      type: string
      enum:
        - fundamentals
        - base
        - full
        - details
        - csv
    ListingOrderByKeys:
      type: string
      enum:
        - mostRecentlyUpdated
        - applicationDates
        - mostRecentlyClosed
        - mostRecentlyPublished
        - name
        - waitlistOpen
        - status
        - unitsAvailable
        - marketingType
    OrderByEnum:
      type: string
      enum:
        - asc
        - desc
    ListingsQueryParams:
      type: object
      properties:
        page:
          type: number
          example: 1
          default: 1
        limit:
          type: number
          example: 10
          default: 10
        filter:
          items:
            type: string
          example:
            $comparison: "="
            status: active
          type: array
        view:
          example: full
          $ref: "#/components/schemas/ListingViews"
        orderBy:
          example: '["updatedAt"]'
          $ref: "#/components/schemas/ListingOrderByKeys"
        orderDir:
          example: '["desc"]'
          default: '["desc"]'
          $ref: "#/components/schemas/OrderByEnum"
        search:
          type: string
          example: search
    ListingsStatusEnum:
      type: string
      enum:
        - active
        - pending
        - closed
        - pendingReview
        - changesRequested
    FilterAvailabilityEnum:
      type: string
      enum:
        - waitlistOpen
        - unitsAvailable
    ListingFilterParams:
      type: object
      properties:
        $comparison:
          type: string
          enum:
            - "="
            - <>
            - IN
            - ">="
            - <=
            - NA
          example: "="
          default: "="
        name:
          type: string
          example: Coliseum
        status:
          example: active
          $ref: "#/components/schemas/ListingsStatusEnum"
        neighborhood:
          type: string
          example: Fox Creek
        bedrooms:
          type: number
          example: "3"
        bathrooms:
          type: number
          example: "3"
        zipcode:
          type: string
          example: "48211"
        leasingAgents:
          type: string
          example: FAB1A3C6-965E-4054-9A48-A282E92E9426
        jurisdiction:
          type: string
          example: bab6cb4f-7a5a-4ee5-b327-0c2508807780
        isExternal:
          type: boolean
          example: false
        availability:
          example: waitlistOpen
          $ref: "#/components/schemas/FilterAvailabilityEnum"
        city:
          type: string
          example: San Jose
        monthlyRent:
          type: number
          example: "1000"
        counties:
          example:
            - Santa Clara
          type: array
          items:
            type: string
      required:
        - $comparison
    ListingsRetrieveParams:
      type: object
      properties:
        view:
          example: full
          $ref: "#/components/schemas/ListingViews"
    PaginationAllowsAllQueryParams:
      type: object
      properties:
        page:
          type: number
          example: 1
          default: 1
        limit:
          type: number
          example: 10
          default: 10
    IdDTO:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        ordinal:
          type: number
      required:
        - id
    ApplicationAddressTypeEnum:
      type: string
      enum:
        - leasingAgent
    ReviewOrderTypeEnum:
      type: string
      enum:
        - lottery
        - firstComeFirstServe
        - waitlist
    LotteryStatusEnum:
      type: string
      enum:
        - errored
        - ran
        - approved
        - releasedToPartners
        - publishedToPublic
        - expired
    MultiselectLink:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
      required:
        - title
        - url
    ValidationMethodEnum:
      type: string
      enum:
        - radius
        - map
        - none
    MultiselectOption:
      type: object
      properties:
        text:
          type: string
        untranslatedText:
          type: string
        ordinal:
          type: number
        description:
          type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/MultiselectLink"
        collectAddress:
          type: boolean
        validationMethod:
          $ref: "#/components/schemas/ValidationMethodEnum"
        radiusSize:
          type: number
        collectName:
          type: boolean
        collectRelationship:
          type: boolean
        exclusive:
          type: boolean
        mapLayerId:
          type: string
        mapPinPosition:
          type: string
      required:
        - text
        - ordinal
    MultiselectQuestionsApplicationSectionEnum:
      type: string
      enum:
        - programs
        - preferences
    MultiselectQuestion:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        text:
          type: string
        untranslatedText:
          type: string
        untranslatedOptOutText:
          type: string
        subText:
          type: string
        description:
          type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/MultiselectLink"
        jurisdictions:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        options:
          type: array
          items:
            $ref: "#/components/schemas/MultiselectOption"
        optOutText:
          type: string
        hideFromListing:
          type: boolean
        applicationSection:
          $ref: "#/components/schemas/MultiselectQuestionsApplicationSectionEnum"
      required:
        - id
        - createdAt
        - updatedAt
        - text
        - jurisdictions
        - applicationSection
    ListingMultiselectQuestion:
      type: object
      properties:
        multiselectQuestions:
          $ref: "#/components/schemas/MultiselectQuestion"
        ordinal:
          type: number
      required:
        - multiselectQuestions
    ApplicationMethodsTypeEnum:
      type: string
      enum:
        - Internal
        - FileDownload
        - ExternalLink
        - PaperPickup
        - POBox
        - LeasingAgent
        - Referral
    LanguagesEnum:
      type: string
      enum:
        - en
        - es
        - vi
        - zh
        - tl
    Asset:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        fileId:
          type: string
        label:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - fileId
        - label
    PaperApplication:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        assets:
          $ref: "#/components/schemas/Asset"
      required:
        - id
        - createdAt
        - updatedAt
        - language
        - assets
    ApplicationMethod:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        type:
          $ref: "#/components/schemas/ApplicationMethodsTypeEnum"
        label:
          type: string
        externalReference:
          type: string
        acceptsPostmarkedApplications:
          type: boolean
        phoneNumber:
          type: string
        paperApplications:
          type: array
          items:
            $ref: "#/components/schemas/PaperApplication"
      required:
        - id
        - createdAt
        - updatedAt
        - type
    ListingEventsTypeEnum:
      type: string
      enum:
        - openHouse
        - publicLottery
        - lotteryResults
    ListingEvent:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        type:
          $ref: "#/components/schemas/ListingEventsTypeEnum"
        startDate:
          format: date-time
          type: string
        startTime:
          format: date-time
          type: string
        endTime:
          format: date-time
          type: string
        url:
          type: string
        note:
          type: string
        label:
          type: string
        assets:
          $ref: "#/components/schemas/Asset"
      required:
        - id
        - createdAt
        - updatedAt
        - type
    Address:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        placeName:
          type: string
        city:
          type: string
        county:
          type: string
        state:
          type: string
        street:
          type: string
        street2:
          type: string
        zipCode:
          type: string
        latitude:
          type: number
        longitude:
          type: number
      required:
        - id
        - createdAt
        - updatedAt
        - city
        - state
        - street
        - zipCode
    ListingImage:
      type: object
      properties:
        assets:
          $ref: "#/components/schemas/Asset"
        ordinal:
          type: number
      required:
        - assets
    ListingFeatures:
      type: object
      properties:
        elevator:
          type: boolean
        wheelchairRamp:
          type: boolean
        serviceAnimalsAllowed:
          type: boolean
        accessibleParking:
          type: boolean
        parkingOnSite:
          type: boolean
        inUnitWasherDryer:
          type: boolean
        laundryInBuilding:
          type: boolean
        barrierFreeEntrance:
          type: boolean
        rollInShower:
          type: boolean
        grabBars:
          type: boolean
        heatingInUnit:
          type: boolean
        acInUnit:
          type: boolean
        hearing:
          type: boolean
        visual:
          type: boolean
        mobility:
          type: boolean
    ListingUtilities:
      type: object
      properties:
        water:
          type: boolean
        gas:
          type: boolean
        trash:
          type: boolean
        sewer:
          type: boolean
        electricity:
          type: boolean
        cable:
          type: boolean
        phone:
          type: boolean
        internet:
          type: boolean
    AmiChartItem:
      type: object
      properties:
        percentOfAmi:
          type: number
        householdSize:
          type: number
        income:
          type: number
      required:
        - percentOfAmi
        - householdSize
        - income
    AmiChart:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/AmiChartItem"
        name:
          type: string
        jurisdictions:
          $ref: "#/components/schemas/IdDTO"
      required:
        - id
        - createdAt
        - updatedAt
        - items
        - name
        - jurisdictions
    UnitTypeEnum:
      type: string
      enum:
        - studio
        - oneBdrm
        - twoBdrm
        - threeBdrm
        - fourBdrm
        - SRO
        - fiveBdrm
    UnitType:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        name:
          $ref: "#/components/schemas/UnitTypeEnum"
        numBedrooms:
          type: number
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - numBedrooms
    UnitRentTypeEnum:
      type: string
      enum:
        - fixed
        - percentageOfIncome
    UnitRentType:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        name:
          $ref: "#/components/schemas/UnitRentTypeEnum"
      required:
        - id
        - createdAt
        - updatedAt
        - name
    UnitAccessibilityPriorityType:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        name:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - name
    UnitAmiChartOverride:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/AmiChartItem"
      required:
        - id
        - createdAt
        - updatedAt
        - items
    Unit:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        amiChart:
          $ref: "#/components/schemas/AmiChart"
        amiPercentage:
          type: string
        annualIncomeMin:
          type: string
        monthlyIncomeMin:
          type: string
        floor:
          type: number
        annualIncomeMax:
          type: string
        maxOccupancy:
          type: number
        minOccupancy:
          type: number
        monthlyRent:
          type: string
        numBathrooms:
          type: number
        numBedrooms:
          type: number
        number:
          type: string
        sqFeet:
          type: string
        monthlyRentAsPercentOfIncome:
          type: string
        bmrProgramChart:
          type: boolean
        unitTypes:
          $ref: "#/components/schemas/UnitType"
        unitRentTypes:
          $ref: "#/components/schemas/UnitRentType"
        unitAccessibilityPriorityTypes:
          $ref: "#/components/schemas/UnitAccessibilityPriorityType"
        unitAmiChartOverrides:
          $ref: "#/components/schemas/UnitAmiChartOverride"
      required:
        - id
        - createdAt
        - updatedAt
    MinMaxCurrency:
      type: object
      properties:
        min:
          type: string
        max:
          type: string
      required:
        - min
        - max
    MinMax:
      type: object
      properties:
        min:
          type: number
        max:
          type: number
      required:
        - min
        - max
    UnitSummary:
      type: object
      properties:
        unitTypes:
          $ref: "#/components/schemas/UnitType"
        minIncomeRange:
          $ref: "#/components/schemas/MinMaxCurrency"
        occupancyRange:
          $ref: "#/components/schemas/MinMax"
        rentAsPercentIncomeRange:
          $ref: "#/components/schemas/MinMax"
        rentRange:
          $ref: "#/components/schemas/MinMaxCurrency"
        totalAvailable:
          type: number
        areaRange:
          $ref: "#/components/schemas/MinMax"
        floorRange:
          $ref: "#/components/schemas/MinMax"
      required:
        - unitTypes
        - minIncomeRange
        - occupancyRange
        - rentAsPercentIncomeRange
        - rentRange
        - totalAvailable
        - areaRange
    UnitSummaryByAMI:
      type: object
      properties:
        percent:
          type: string
        byUnitType:
          type: array
          items:
            $ref: "#/components/schemas/UnitSummary"
      required:
        - percent
        - byUnitType
    HMI:
      type: object
      properties:
        columns:
          type: object
        rows:
          type: array
          items:
            type: object
      required:
        - columns
        - rows
    UnitsSummarized:
      type: object
      properties:
        unitTypes:
          type: array
          items:
            $ref: "#/components/schemas/UnitType"
        priorityTypes:
          type: array
          items:
            $ref: "#/components/schemas/UnitAccessibilityPriorityType"
        amiPercentages:
          type: array
          items:
            type: string
        byUnitTypeAndRent:
          type: array
          items:
            $ref: "#/components/schemas/UnitSummary"
        byUnitType:
          type: array
          items:
            $ref: "#/components/schemas/UnitSummary"
        byAMI:
          type: array
          items:
            $ref: "#/components/schemas/UnitSummaryByAMI"
        hmi:
          $ref: "#/components/schemas/HMI"
      required:
        - unitTypes
        - priorityTypes
        - amiPercentages
        - byUnitTypeAndRent
        - byUnitType
        - byAMI
        - hmi
    UnitsSummary:
      type: object
      properties:
        id:
          type: string
        unitTypes:
          $ref: "#/components/schemas/IdDTO"
        monthlyRentMin:
          type: number
        monthlyRentMax:
          type: number
        monthlyRentAsPercentOfIncome:
          type: string
        amiPercentage:
          type: number
        minimumIncomeMin:
          type: string
        minimumIncomeMax:
          type: string
        maxOccupancy:
          type: number
        minOccupancy:
          type: number
        floorMin:
          type: number
        floorMax:
          type: number
        sqFeetMin:
          type: string
        sqFeetMax:
          type: string
        unitAccessibilityPriorityTypes:
          $ref: "#/components/schemas/IdDTO"
        totalCount:
          type: number
        totalAvailable:
          type: number
      required:
        - id
        - unitTypes
    ApplicationLotteryTotal:
      type: object
      properties:
        listingId:
          type: string
        multiselectQuestionId:
          type: string
        total:
          type: number
      required:
        - listingId
        - total
    Listing:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        additionalApplicationSubmissionNotes:
          type: string
        digitalApplication:
          type: boolean
        commonDigitalApplication:
          type: boolean
        paperApplication:
          type: boolean
        referralOpportunity:
          type: boolean
        accessibility:
          type: string
        amenities:
          type: string
        buildingTotalUnits:
          type: number
        developer:
          type: string
        householdSizeMax:
          type: number
        householdSizeMin:
          type: number
        neighborhood:
          type: string
        petPolicy:
          type: string
        smokingPolicy:
          type: string
        unitsAvailable:
          type: number
        unitAmenities:
          type: string
        servicesOffered:
          type: string
        yearBuilt:
          type: number
        applicationDueDate:
          format: date-time
          type: string
        applicationOpenDate:
          format: date-time
          type: string
        applicationFee:
          type: string
        applicationOrganization:
          type: string
        applicationPickUpAddressOfficeHours:
          type: string
        applicationPickUpAddressType:
          $ref: "#/components/schemas/ApplicationAddressTypeEnum"
        applicationDropOffAddressOfficeHours:
          type: string
        applicationDropOffAddressType:
          $ref: "#/components/schemas/ApplicationAddressTypeEnum"
        applicationMailingAddressType:
          $ref: "#/components/schemas/ApplicationAddressTypeEnum"
        buildingSelectionCriteria:
          type: string
        costsNotIncluded:
          type: string
        creditHistory:
          type: string
        criminalBackground:
          type: string
        depositMin:
          type: string
        depositMax:
          type: string
        depositHelperText:
          type: string
        disableUnitsAccordion:
          type: boolean
        leasingAgentEmail:
          type: string
        leasingAgentName:
          type: string
        leasingAgentOfficeHours:
          type: string
        leasingAgentPhone:
          type: string
        leasingAgentTitle:
          type: string
        name:
          type: string
        postmarkedApplicationsReceivedByDate:
          format: date-time
          type: string
        programRules:
          type: string
        rentalAssistance:
          type: string
        rentalHistory:
          type: string
        requiredDocuments:
          type: string
        specialNotes:
          type: string
        waitlistCurrentSize:
          type: number
        waitlistMaxSize:
          type: number
        whatToExpect:
          type: string
        status:
          $ref: "#/components/schemas/ListingsStatusEnum"
        reviewOrderType:
          $ref: "#/components/schemas/ReviewOrderTypeEnum"
        applicationConfig:
          type: object
        displayWaitlistSize:
          type: boolean
        showWaitlist:
          type: boolean
        reservedCommunityDescription:
          type: string
        reservedCommunityMinAge:
          type: number
        resultLink:
          type: string
        isWaitlistOpen:
          type: boolean
        waitlistOpenSpots:
          type: number
        customMapPin:
          type: boolean
        contentUpdatedAt:
          format: date-time
          type: string
        publishedAt:
          format: date-time
          type: string
        closedAt:
          format: date-time
          type: string
        afsLastRunAt:
          format: date-time
          type: string
        lotteryLastPublishedAt:
          format: date-time
          type: string
        lotteryLastRunAt:
          format: date-time
          type: string
        lotteryStatus:
          $ref: "#/components/schemas/LotteryStatusEnum"
        lastApplicationUpdateAt:
          format: date-time
          type: string
        listingMultiselectQuestions:
          type: array
          items:
            $ref: "#/components/schemas/ListingMultiselectQuestion"
        applicationMethods:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMethod"
        referralApplication:
          $ref: "#/components/schemas/ApplicationMethod"
        assets:
          type: array
          items:
            $ref: "#/components/schemas/Asset"
        listingEvents:
          type: array
          items:
            $ref: "#/components/schemas/ListingEvent"
        listingsBuildingAddress:
          $ref: "#/components/schemas/Address"
        listingsApplicationPickUpAddress:
          $ref: "#/components/schemas/Address"
        listingsApplicationDropOffAddress:
          $ref: "#/components/schemas/Address"
        listingsApplicationMailingAddress:
          $ref: "#/components/schemas/Address"
        listingsLeasingAgentAddress:
          $ref: "#/components/schemas/Address"
        listingsBuildingSelectionCriteriaFile:
          $ref: "#/components/schemas/Asset"
        jurisdictions:
          $ref: "#/components/schemas/IdDTO"
        listingsResult:
          $ref: "#/components/schemas/Asset"
        reservedCommunityTypes:
          $ref: "#/components/schemas/IdDTO"
        listingImages:
          type: array
          items:
            $ref: "#/components/schemas/ListingImage"
        listingFeatures:
          $ref: "#/components/schemas/ListingFeatures"
        listingUtilities:
          $ref: "#/components/schemas/ListingUtilities"
        units:
          type: array
          items:
            $ref: "#/components/schemas/Unit"
        unitsSummarized:
          $ref: "#/components/schemas/UnitsSummarized"
        unitsSummary:
          type: array
          items:
            $ref: "#/components/schemas/UnitsSummary"
        urlSlug:
          type: string
        requestedChanges:
          type: string
        requestedChangesDate:
          format: date-time
          type: string
        requestedChangesUser:
          $ref: "#/components/schemas/IdDTO"
        isExternal:
          type: boolean
        lotteryOptIn:
          type: boolean
        applicationLotteryTotals:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationLotteryTotal"
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - status
        - displayWaitlistSize
        - applicationMethods
        - assets
        - listingEvents
        - listingsBuildingAddress
        - jurisdictions
        - units
        - applicationLotteryTotals
    PaginationMeta:
      type: object
      properties:
        currentPage:
          type: number
        itemCount:
          type: number
        itemsPerPage:
          type: number
        totalItems:
          type: number
        totalPages:
          type: number
      required:
        - currentPage
        - itemCount
        - itemsPerPage
        - totalItems
        - totalPages
    PaginatedListingDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Listing"
        meta:
          $ref: "#/components/schemas/PaginationMeta"
      required:
        - items
        - meta
    UnitAmiChartOverrideCreate:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/AmiChartItem"
      required:
        - items
    UnitCreate:
      type: object
      properties:
        amiPercentage:
          type: string
        annualIncomeMin:
          type: string
        monthlyIncomeMin:
          type: string
        floor:
          type: number
        annualIncomeMax:
          type: string
        maxOccupancy:
          type: number
        minOccupancy:
          type: number
        monthlyRent:
          type: string
        numBathrooms:
          type: number
        numBedrooms:
          type: number
        number:
          type: string
        sqFeet:
          type: string
        monthlyRentAsPercentOfIncome:
          type: string
        bmrProgramChart:
          type: boolean
        unitTypes:
          $ref: "#/components/schemas/IdDTO"
        amiChart:
          $ref: "#/components/schemas/IdDTO"
        unitAccessibilityPriorityTypes:
          $ref: "#/components/schemas/IdDTO"
        unitRentTypes:
          $ref: "#/components/schemas/IdDTO"
        unitAmiChartOverrides:
          $ref: "#/components/schemas/UnitAmiChartOverrideCreate"
    AssetCreate:
      type: object
      properties:
        fileId:
          type: string
        label:
          type: string
        id:
          type: string
      required:
        - fileId
        - label
    PaperApplicationCreate:
      type: object
      properties:
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        assets:
          $ref: "#/components/schemas/AssetCreate"
      required:
        - language
    ApplicationMethodCreate:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ApplicationMethodsTypeEnum"
        label:
          type: string
        externalReference:
          type: string
        acceptsPostmarkedApplications:
          type: boolean
        phoneNumber:
          type: string
        paperApplications:
          type: array
          items:
            $ref: "#/components/schemas/PaperApplicationCreate"
      required:
        - type
    UnitsSummaryCreate:
      type: object
      properties:
        unitTypes:
          $ref: "#/components/schemas/IdDTO"
        monthlyRentMin:
          type: number
        monthlyRentMax:
          type: number
        monthlyRentAsPercentOfIncome:
          type: string
        amiPercentage:
          type: number
        minimumIncomeMin:
          type: string
        minimumIncomeMax:
          type: string
        maxOccupancy:
          type: number
        minOccupancy:
          type: number
        floorMin:
          type: number
        floorMax:
          type: number
        sqFeetMin:
          type: string
        sqFeetMax:
          type: string
        unitAccessibilityPriorityTypes:
          $ref: "#/components/schemas/IdDTO"
        totalCount:
          type: number
        totalAvailable:
          type: number
      required:
        - unitTypes
    ListingImageCreate:
      type: object
      properties:
        ordinal:
          type: number
        assets:
          $ref: "#/components/schemas/AssetCreate"
      required:
        - assets
    AddressCreate:
      type: object
      properties:
        placeName:
          type: string
        city:
          type: string
        county:
          type: string
        state:
          type: string
        street:
          type: string
        street2:
          type: string
        zipCode:
          type: string
        latitude:
          type: number
        longitude:
          type: number
      required:
        - city
        - state
        - street
        - zipCode
    ListingEventCreate:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ListingEventsTypeEnum"
        startDate:
          format: date-time
          type: string
        startTime:
          format: date-time
          type: string
        endTime:
          format: date-time
          type: string
        url:
          type: string
        note:
          type: string
        label:
          type: string
        assets:
          $ref: "#/components/schemas/AssetCreate"
      required:
        - type
    ListingCreate:
      type: object
      properties:
        additionalApplicationSubmissionNotes:
          type: string
        digitalApplication:
          type: boolean
        commonDigitalApplication:
          type: boolean
        paperApplication:
          type: boolean
        referralOpportunity:
          type: boolean
        accessibility:
          type: string
        amenities:
          type: string
        buildingTotalUnits:
          type: number
        developer:
          type: string
        householdSizeMax:
          type: number
        householdSizeMin:
          type: number
        neighborhood:
          type: string
        petPolicy:
          type: string
        smokingPolicy:
          type: string
        unitsAvailable:
          type: number
        unitAmenities:
          type: string
        servicesOffered:
          type: string
        yearBuilt:
          type: number
        applicationDueDate:
          format: date-time
          type: string
        applicationOpenDate:
          format: date-time
          type: string
        applicationFee:
          type: string
        applicationOrganization:
          type: string
        applicationPickUpAddressOfficeHours:
          type: string
        applicationPickUpAddressType:
          $ref: "#/components/schemas/ApplicationAddressTypeEnum"
        applicationDropOffAddressOfficeHours:
          type: string
        applicationDropOffAddressType:
          $ref: "#/components/schemas/ApplicationAddressTypeEnum"
        applicationMailingAddressType:
          $ref: "#/components/schemas/ApplicationAddressTypeEnum"
        buildingSelectionCriteria:
          type: string
        costsNotIncluded:
          type: string
        creditHistory:
          type: string
        criminalBackground:
          type: string
        depositMin:
          type: string
        depositMax:
          type: string
        depositHelperText:
          type: string
        disableUnitsAccordion:
          type: boolean
        leasingAgentEmail:
          type: string
        leasingAgentName:
          type: string
        leasingAgentOfficeHours:
          type: string
        leasingAgentPhone:
          type: string
        leasingAgentTitle:
          type: string
        name:
          type: string
        postmarkedApplicationsReceivedByDate:
          format: date-time
          type: string
        programRules:
          type: string
        rentalAssistance:
          type: string
        rentalHistory:
          type: string
        requiredDocuments:
          type: string
        specialNotes:
          type: string
        waitlistCurrentSize:
          type: number
        waitlistMaxSize:
          type: number
        whatToExpect:
          type: string
        status:
          $ref: "#/components/schemas/ListingsStatusEnum"
        reviewOrderType:
          $ref: "#/components/schemas/ReviewOrderTypeEnum"
        displayWaitlistSize:
          type: boolean
        reservedCommunityDescription:
          type: string
        reservedCommunityMinAge:
          type: number
        resultLink:
          type: string
        isWaitlistOpen:
          type: boolean
        waitlistOpenSpots:
          type: number
        customMapPin:
          type: boolean
        contentUpdatedAt:
          format: date-time
          type: string
        lotteryLastPublishedAt:
          format: date-time
          type: string
        lotteryLastRunAt:
          format: date-time
          type: string
        lotteryStatus:
          $ref: "#/components/schemas/LotteryStatusEnum"
        lastApplicationUpdateAt:
          format: date-time
          type: string
        jurisdictions:
          $ref: "#/components/schemas/IdDTO"
        reservedCommunityTypes:
          $ref: "#/components/schemas/IdDTO"
        requestedChanges:
          type: string
        requestedChangesDate:
          format: date-time
          type: string
        isExternal:
          type: boolean
        lotteryOptIn:
          type: boolean
        listingMultiselectQuestions:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        units:
          type: array
          items:
            $ref: "#/components/schemas/UnitCreate"
        applicationMethods:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMethodCreate"
        assets:
          type: array
          items:
            $ref: "#/components/schemas/AssetCreate"
        unitsSummary:
          type: array
          items:
            $ref: "#/components/schemas/UnitsSummaryCreate"
        listingImages:
          type: array
          items:
            $ref: "#/components/schemas/ListingImageCreate"
        listingsApplicationPickUpAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsApplicationMailingAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsApplicationDropOffAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsLeasingAgentAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsBuildingAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsBuildingSelectionCriteriaFile:
          $ref: "#/components/schemas/AssetCreate"
        listingsResult:
          $ref: "#/components/schemas/AssetCreate"
        listingEvents:
          type: array
          items:
            $ref: "#/components/schemas/ListingEventCreate"
        listingFeatures:
          $ref: "#/components/schemas/ListingFeatures"
        listingUtilities:
          $ref: "#/components/schemas/ListingUtilities"
        requestedChangesUser:
          $ref: "#/components/schemas/IdDTO"
      required:
        - name
        - status
        - displayWaitlistSize
        - jurisdictions
        - unitsSummary
        - listingEvents
    ListingDuplicate:
      type: object
      properties:
        name:
          type: string
        includeUnits:
          type: boolean
        storedListing:
          $ref: "#/components/schemas/IdDTO"
      required:
        - name
        - includeUnits
        - storedListing
    ListingUpdate:
      type: object
      properties:
        id:
          type: string
        additionalApplicationSubmissionNotes:
          type: string
        digitalApplication:
          type: boolean
        commonDigitalApplication:
          type: boolean
        paperApplication:
          type: boolean
        referralOpportunity:
          type: boolean
        accessibility:
          type: string
        amenities:
          type: string
        buildingTotalUnits:
          type: number
        developer:
          type: string
        householdSizeMax:
          type: number
        householdSizeMin:
          type: number
        neighborhood:
          type: string
        petPolicy:
          type: string
        smokingPolicy:
          type: string
        unitsAvailable:
          type: number
        unitAmenities:
          type: string
        servicesOffered:
          type: string
        yearBuilt:
          type: number
        applicationDueDate:
          format: date-time
          type: string
        applicationOpenDate:
          format: date-time
          type: string
        applicationFee:
          type: string
        applicationOrganization:
          type: string
        applicationPickUpAddressOfficeHours:
          type: string
        applicationPickUpAddressType:
          $ref: "#/components/schemas/ApplicationAddressTypeEnum"
        applicationDropOffAddressOfficeHours:
          type: string
        applicationDropOffAddressType:
          $ref: "#/components/schemas/ApplicationAddressTypeEnum"
        applicationMailingAddressType:
          $ref: "#/components/schemas/ApplicationAddressTypeEnum"
        buildingSelectionCriteria:
          type: string
        costsNotIncluded:
          type: string
        creditHistory:
          type: string
        criminalBackground:
          type: string
        depositMin:
          type: string
        depositMax:
          type: string
        depositHelperText:
          type: string
        disableUnitsAccordion:
          type: boolean
        leasingAgentEmail:
          type: string
        leasingAgentName:
          type: string
        leasingAgentOfficeHours:
          type: string
        leasingAgentPhone:
          type: string
        leasingAgentTitle:
          type: string
        name:
          type: string
        postmarkedApplicationsReceivedByDate:
          format: date-time
          type: string
        programRules:
          type: string
        rentalAssistance:
          type: string
        rentalHistory:
          type: string
        requiredDocuments:
          type: string
        specialNotes:
          type: string
        waitlistCurrentSize:
          type: number
        waitlistMaxSize:
          type: number
        whatToExpect:
          type: string
        status:
          $ref: "#/components/schemas/ListingsStatusEnum"
        reviewOrderType:
          $ref: "#/components/schemas/ReviewOrderTypeEnum"
        displayWaitlistSize:
          type: boolean
        reservedCommunityDescription:
          type: string
        reservedCommunityMinAge:
          type: number
        resultLink:
          type: string
        isWaitlistOpen:
          type: boolean
        waitlistOpenSpots:
          type: number
        customMapPin:
          type: boolean
        contentUpdatedAt:
          format: date-time
          type: string
        lotteryLastPublishedAt:
          format: date-time
          type: string
        lotteryLastRunAt:
          format: date-time
          type: string
        lotteryStatus:
          $ref: "#/components/schemas/LotteryStatusEnum"
        lastApplicationUpdateAt:
          format: date-time
          type: string
        jurisdictions:
          $ref: "#/components/schemas/IdDTO"
        reservedCommunityTypes:
          $ref: "#/components/schemas/IdDTO"
        requestedChanges:
          type: string
        requestedChangesDate:
          format: date-time
          type: string
        isExternal:
          type: boolean
        lotteryOptIn:
          type: boolean
        listingMultiselectQuestions:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        units:
          type: array
          items:
            $ref: "#/components/schemas/UnitCreate"
        applicationMethods:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMethodCreate"
        assets:
          type: array
          items:
            $ref: "#/components/schemas/AssetCreate"
        unitsSummary:
          type: array
          items:
            $ref: "#/components/schemas/UnitsSummaryCreate"
        listingImages:
          type: array
          items:
            $ref: "#/components/schemas/ListingImageCreate"
        listingsApplicationPickUpAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsApplicationMailingAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsApplicationDropOffAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsLeasingAgentAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsBuildingAddress:
          $ref: "#/components/schemas/AddressCreate"
        listingsBuildingSelectionCriteriaFile:
          $ref: "#/components/schemas/AssetCreate"
        listingsResult:
          $ref: "#/components/schemas/AssetCreate"
        listingEvents:
          type: array
          items:
            $ref: "#/components/schemas/ListingEventCreate"
        listingFeatures:
          $ref: "#/components/schemas/ListingFeatures"
        listingUtilities:
          $ref: "#/components/schemas/ListingUtilities"
        requestedChangesUser:
          $ref: "#/components/schemas/IdDTO"
      required:
        - id
        - name
        - status
        - displayWaitlistSize
        - jurisdictions
        - unitsSummary
        - listingEvents
    AfsView:
      type: string
      enum:
        - pending
        - pendingNameAndDoB
        - pendingEmail
        - resolved
    RuleEnum:
      type: string
      enum:
        - nameAndDOB
        - email
        - combination
    FlaggedSetStatusEnum:
      type: string
      enum:
        - flagged
        - pending
        - resolved
    IncomePeriodEnum:
      type: string
      enum:
        - perMonth
        - perYear
    ApplicationStatusEnum:
      type: string
      enum:
        - draft
        - submitted
        - removed
    ApplicationSubmissionTypeEnum:
      type: string
      enum:
        - paper
        - electronical
    ApplicationReviewStatusEnum:
      type: string
      enum:
        - pending
        - pendingAndValid
        - valid
        - duplicate
    Accessibility:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        mobility:
          type: boolean
        vision:
          type: boolean
        hearing:
          type: boolean
      required:
        - id
        - createdAt
        - updatedAt
    Demographic:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        ethnicity:
          type: string
        gender:
          type: string
        sexualOrientation:
          type: string
        howDidYouHear:
          type: array
          items:
            type: string
        race:
          type: array
          items:
            type: string
        spokenLanguage:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
    YesNoEnum:
      type: string
      enum:
        - "yes"
        - "no"
    Applicant:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        birthMonth:
          type: string
        birthDay:
          type: string
        birthYear:
          type: string
        emailAddress:
          type: string
        noEmail:
          type: boolean
        phoneNumber:
          type: string
        phoneNumberType:
          type: string
        noPhone:
          type: boolean
        workInRegion:
          $ref: "#/components/schemas/YesNoEnum"
        applicantWorkAddress:
          $ref: "#/components/schemas/Address"
        applicantAddress:
          $ref: "#/components/schemas/Address"
      required:
        - id
        - createdAt
        - updatedAt
        - applicantWorkAddress
        - applicantAddress
    AlternateContactRelationship:
      type: string
      enum:
        - familyMember
        - friend
        - caseManager
        - other
        - noContact
    AlternateContact:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        type:
          $ref: "#/components/schemas/AlternateContactRelationship"
        otherType:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        agency:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
        address:
          $ref: "#/components/schemas/Address"
      required:
        - id
        - createdAt
        - updatedAt
        - address
    HouseholdMemberRelationship:
      type: string
      enum:
        - spouse
        - registeredDomesticPartner
        - parent
        - child
        - sibling
        - cousin
        - aunt
        - uncle
        - nephew
        - niece
        - grandparent
        - greatGrandparent
        - inLaw
        - friend
        - other
    HouseholdMember:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        orderId:
          type: number
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        birthMonth:
          type: string
        birthDay:
          type: string
        birthYear:
          type: string
        sameAddress:
          $ref: "#/components/schemas/YesNoEnum"
        relationship:
          $ref: "#/components/schemas/HouseholdMemberRelationship"
        workInRegion:
          $ref: "#/components/schemas/YesNoEnum"
        householdMemberWorkAddress:
          $ref: "#/components/schemas/Address"
        householdMemberAddress:
          $ref: "#/components/schemas/Address"
      required:
        - id
        - createdAt
        - updatedAt
        - householdMemberAddress
    ApplicationMultiselectQuestionOption:
      type: object
      properties:
        key:
          type: string
        checked:
          type: boolean
        mapPinPosition:
          type: string
        extraData:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/BooleanInput"
              - $ref: "#/components/schemas/TextInput"
              - $ref: "#/components/schemas/AddressInput"
      required:
        - key
        - checked
    ApplicationMultiselectQuestion:
      type: object
      properties:
        multiselectQuestionId:
          type: string
        key:
          type: string
        claimed:
          type: boolean
        options:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMultiselectQuestionOption"
      required:
        - multiselectQuestionId
        - key
        - claimed
        - options
    ApplicationLotteryPosition:
      type: object
      properties:
        listingId:
          type: string
        applicationId:
          type: string
        multiselectQuestionId:
          type: string
        ordinal:
          type: number
      required:
        - listingId
        - applicationId
        - multiselectQuestionId
        - ordinal
    Application:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
        appUrl:
          type: string
        additionalPhone:
          type: boolean
        additionalPhoneNumber:
          type: string
        additionalPhoneNumberType:
          type: string
        contactPreferences:
          type: array
          items:
            type: string
        householdSize:
          type: number
        housingStatus:
          type: string
        sendMailToMailingAddress:
          type: boolean
        householdExpectingChanges:
          type: boolean
        householdStudent:
          type: boolean
        incomeVouchers:
          type: array
          items:
            type: string
        income:
          type: string
        incomePeriod:
          $ref: "#/components/schemas/IncomePeriodEnum"
        status:
          $ref: "#/components/schemas/ApplicationStatusEnum"
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        acceptedTerms:
          type: boolean
        submissionType:
          $ref: "#/components/schemas/ApplicationSubmissionTypeEnum"
        submissionDate:
          format: date-time
          type: string
        receivedBy:
          type: string
        receivedAt:
          format: date-time
          type: string
        markedAsDuplicate:
          type: boolean
        flagged:
          type: boolean
        confirmationCode:
          type: string
        reviewStatus:
          $ref: "#/components/schemas/ApplicationReviewStatusEnum"
        applicationsMailingAddress:
          $ref: "#/components/schemas/Address"
        applicationsAlternateAddress:
          $ref: "#/components/schemas/Address"
        accessibility:
          $ref: "#/components/schemas/Accessibility"
        demographics:
          $ref: "#/components/schemas/Demographic"
        preferredUnitTypes:
          type: array
          items:
            $ref: "#/components/schemas/UnitType"
        applicant:
          $ref: "#/components/schemas/Applicant"
        alternateContact:
          $ref: "#/components/schemas/AlternateContact"
        householdMember:
          type: array
          items:
            $ref: "#/components/schemas/HouseholdMember"
        preferences:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMultiselectQuestion"
        programs:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMultiselectQuestion"
        listings:
          $ref: "#/components/schemas/IdDTO"
        applicationLotteryPositions:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationLotteryPosition"
      required:
        - id
        - createdAt
        - updatedAt
        - contactPreferences
        - householdSize
        - status
        - submissionType
        - markedAsDuplicate
        - confirmationCode
        - applicationsMailingAddress
        - applicationsAlternateAddress
        - accessibility
        - demographics
        - preferredUnitTypes
        - applicant
        - alternateContact
        - householdMember
        - listings
        - applicationLotteryPositions
    ApplicationFlaggedSet:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        resolvingUser:
          $ref: "#/components/schemas/IdDTO"
        listing:
          $ref: "#/components/schemas/IdDTO"
        rule:
          $ref: "#/components/schemas/RuleEnum"
        ruleKey:
          type: string
        resolvedTime:
          format: date-time
          type: string
        listingId:
          type: string
        showConfirmationAlert:
          type: boolean
        status:
          $ref: "#/components/schemas/FlaggedSetStatusEnum"
        applications:
          type: array
          items:
            $ref: "#/components/schemas/Application"
      required:
        - id
        - createdAt
        - updatedAt
        - resolvingUser
        - listing
        - rule
        - ruleKey
        - listingId
        - showConfirmationAlert
        - status
        - applications
    ApplicationFlaggedSetPaginationMeta:
      type: object
      properties:
        currentPage:
          type: number
        itemCount:
          type: number
        itemsPerPage:
          type: number
        totalItems:
          type: number
        totalPages:
          type: number
        totalFlagged:
          type: number
      required:
        - currentPage
        - itemCount
        - itemsPerPage
        - totalItems
        - totalPages
        - totalFlagged
    PaginatedAfsDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationFlaggedSet"
        meta:
          $ref: "#/components/schemas/ApplicationFlaggedSetPaginationMeta"
      required:
        - items
        - meta
    AfsMeta:
      type: object
      properties:
        totalCount:
          type: number
        totalResolvedCount:
          type: number
        totalPendingCount:
          type: number
        totalNamePendingCount:
          type: number
        totalEmailPendingCount:
          type: number
    AfsResolve:
      type: object
      properties:
        afsId:
          type: string
        status:
          $ref: "#/components/schemas/FlaggedSetStatusEnum"
        applications:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
      required:
        - afsId
        - status
        - applications
    AmiChartQueryParams:
      type: object
      properties:
        jurisdictionId:
          type: string
    AmiChartCreate:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/AmiChartItem"
        name:
          type: string
        jurisdictions:
          $ref: "#/components/schemas/IdDTO"
      required:
        - items
        - name
        - jurisdictions
    AmiChartUpdate:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/AmiChartItem"
        name:
          type: string
      required:
        - id
        - items
        - name
    ReservedCommunityTypeQueryParams:
      type: object
      properties:
        jurisdictionId:
          type: string
    ReservedCommunityType:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        name:
          type: string
        description:
          type: string
        jurisdictions:
          $ref: "#/components/schemas/IdDTO"
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - jurisdictions
    ReservedCommunityTypeCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        jurisdictions:
          $ref: "#/components/schemas/IdDTO"
      required:
        - name
        - jurisdictions
    ReservedCommunityTypeUpdate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name
    UnitTypeCreate:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/UnitTypeEnum"
        numBedrooms:
          type: number
      required:
        - name
        - numBedrooms
    UnitTypeUpdate:
      type: object
      properties:
        id:
          type: string
        name:
          $ref: "#/components/schemas/UnitTypeEnum"
        numBedrooms:
          type: number
      required:
        - id
        - name
        - numBedrooms
    UnitAccessibilityPriorityTypeCreate:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    UnitAccessibilityPriorityTypeUpdate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    UnitRentTypeCreate:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/UnitRentTypeEnum"
      required:
        - name
    UnitRentTypeUpdate:
      type: object
      properties:
        id:
          type: string
        name:
          $ref: "#/components/schemas/UnitRentTypeEnum"
      required:
        - id
        - name
    JurisdictionCreate:
      type: object
      properties:
        name:
          type: string
        notificationsSignUpUrl:
          type: string
        languages:
          type: array
          items:
            $ref: "#/components/schemas/LanguagesEnum"
        partnerTerms:
          type: string
        publicUrl:
          type: string
        emailFromAddress:
          type: string
        rentalAssistanceDefault:
          type: string
        enablePartnerSettings:
          type: boolean
        enablePartnerDemographics:
          type: boolean
        enableListingOpportunity:
          type: boolean
        enableGeocodingPreferences:
          type: boolean
        enableGeocodingRadiusMethod:
          type: boolean
        enableAccessibilityFeatures:
          type: boolean
        enableUtilitiesIncluded:
          type: boolean
        allowSingleUseCodeLogin:
          type: boolean
        listingApprovalPermissions:
          type: array
          example:
            - admin
          items:
            type: string
            enum:
              - user
              - partner
              - admin
              - jurisdictionAdmin
      required:
        - name
        - languages
        - publicUrl
        - emailFromAddress
        - rentalAssistanceDefault
        - enableAccessibilityFeatures
        - enableUtilitiesIncluded
        - allowSingleUseCodeLogin
        - listingApprovalPermissions
    JurisdictionUpdate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        notificationsSignUpUrl:
          type: string
        languages:
          type: array
          items:
            $ref: "#/components/schemas/LanguagesEnum"
        partnerTerms:
          type: string
        publicUrl:
          type: string
        emailFromAddress:
          type: string
        rentalAssistanceDefault:
          type: string
        enablePartnerSettings:
          type: boolean
        enablePartnerDemographics:
          type: boolean
        enableListingOpportunity:
          type: boolean
        enableGeocodingPreferences:
          type: boolean
        enableGeocodingRadiusMethod:
          type: boolean
        enableAccessibilityFeatures:
          type: boolean
        enableUtilitiesIncluded:
          type: boolean
        allowSingleUseCodeLogin:
          type: boolean
        listingApprovalPermissions:
          type: array
          example:
            - admin
          items:
            type: string
            enum:
              - user
              - partner
              - admin
              - jurisdictionAdmin
      required:
        - id
        - name
        - languages
        - publicUrl
        - emailFromAddress
        - rentalAssistanceDefault
        - enableAccessibilityFeatures
        - enableUtilitiesIncluded
        - allowSingleUseCodeLogin
        - listingApprovalPermissions
    Jurisdiction:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        name:
          type: string
        notificationsSignUpUrl:
          type: string
        languages:
          type: array
          items:
            $ref: "#/components/schemas/LanguagesEnum"
        multiselectQuestions:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        partnerTerms:
          type: string
        publicUrl:
          type: string
        emailFromAddress:
          type: string
        rentalAssistanceDefault:
          type: string
        enablePartnerSettings:
          type: boolean
        enablePartnerDemographics:
          type: boolean
        enableListingOpportunity:
          type: boolean
        enableGeocodingPreferences:
          type: boolean
        enableGeocodingRadiusMethod:
          type: boolean
        enableAccessibilityFeatures:
          type: boolean
        enableUtilitiesIncluded:
          type: boolean
        allowSingleUseCodeLogin:
          type: boolean
        listingApprovalPermissions:
          type: array
          example:
            - admin
          items:
            type: string
            enum:
              - user
              - partner
              - admin
              - jurisdictionAdmin
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - languages
        - multiselectQuestions
        - publicUrl
        - emailFromAddress
        - rentalAssistanceDefault
        - enableAccessibilityFeatures
        - enableUtilitiesIncluded
        - allowSingleUseCodeLogin
        - listingApprovalPermissions
    MultiselectQuestionCreate:
      type: object
      properties:
        text:
          type: string
        untranslatedOptOutText:
          type: string
        subText:
          type: string
        description:
          type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/MultiselectLink"
        jurisdictions:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        options:
          type: array
          items:
            $ref: "#/components/schemas/MultiselectOption"
        optOutText:
          type: string
        hideFromListing:
          type: boolean
        applicationSection:
          $ref: "#/components/schemas/MultiselectQuestionsApplicationSectionEnum"
      required:
        - text
        - jurisdictions
        - applicationSection
    MultiselectQuestionUpdate:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        untranslatedOptOutText:
          type: string
        subText:
          type: string
        description:
          type: string
        links:
          type: array
          items:
            $ref: "#/components/schemas/MultiselectLink"
        jurisdictions:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        options:
          type: array
          items:
            $ref: "#/components/schemas/MultiselectOption"
        optOutText:
          type: string
        hideFromListing:
          type: boolean
        applicationSection:
          $ref: "#/components/schemas/MultiselectQuestionsApplicationSectionEnum"
      required:
        - id
        - text
        - jurisdictions
        - applicationSection
    MultiselectQuestionQueryParams:
      type: object
      properties:
        filter:
          items:
            type: string
          example:
            $comparison: "="
            applicationSection: programs
          type: array
    MultiselectQuestionFilterParams:
      type: object
      properties:
        $comparison:
          type: string
          enum:
            - "="
            - <>
            - IN
            - ">="
            - <=
            - NA
          example: "="
          default: "="
        jurisdiction:
          type: string
          example: uuid
        applicationSection:
          example: preferences
          $ref: "#/components/schemas/MultiselectQuestionsApplicationSectionEnum"
      required:
        - $comparison
    InputType:
      type: string
      enum:
        - boolean
        - text
        - address
        - hhMemberSelect
    AddressInput:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/InputType"
        key:
          type: string
        value:
          $ref: "#/components/schemas/AddressCreate"
      required:
        - type
        - key
        - value
    BooleanInput:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/InputType"
        key:
          type: string
        value:
          type: boolean
      required:
        - type
        - key
        - value
    TextInput:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/InputType"
        key:
          type: string
        value:
          type: string
      required:
        - type
        - key
        - value
    ApplicationOrderByKeys:
      type: string
      enum:
        - firstName
        - lastName
        - submissionDate
        - createdAt
    PaginatedApplicationDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Application"
        meta:
          $ref: "#/components/schemas/PaginationMeta"
      required:
        - items
        - meta
    ApplicationsFilterEnum:
      type: string
      enum:
        - all
        - lottery
        - closed
        - open
    PublicAppsFiltered:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        deletedAt:
          format: date-time
          type: string
        appUrl:
          type: string
        additionalPhone:
          type: boolean
        additionalPhoneNumber:
          type: string
        additionalPhoneNumberType:
          type: string
        contactPreferences:
          type: array
          items:
            type: string
        householdSize:
          type: number
        housingStatus:
          type: string
        sendMailToMailingAddress:
          type: boolean
        householdExpectingChanges:
          type: boolean
        householdStudent:
          type: boolean
        incomeVouchers:
          type: array
          items:
            type: string
        income:
          type: string
        incomePeriod:
          $ref: "#/components/schemas/IncomePeriodEnum"
        status:
          $ref: "#/components/schemas/ApplicationStatusEnum"
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        acceptedTerms:
          type: boolean
        submissionType:
          $ref: "#/components/schemas/ApplicationSubmissionTypeEnum"
        submissionDate:
          format: date-time
          type: string
        receivedBy:
          type: string
        receivedAt:
          format: date-time
          type: string
        markedAsDuplicate:
          type: boolean
        flagged:
          type: boolean
        confirmationCode:
          type: string
        reviewStatus:
          $ref: "#/components/schemas/ApplicationReviewStatusEnum"
        applicationsMailingAddress:
          $ref: "#/components/schemas/Address"
        applicationsAlternateAddress:
          $ref: "#/components/schemas/Address"
        accessibility:
          $ref: "#/components/schemas/Accessibility"
        demographics:
          $ref: "#/components/schemas/Demographic"
        preferredUnitTypes:
          type: array
          items:
            $ref: "#/components/schemas/UnitType"
        applicant:
          $ref: "#/components/schemas/Applicant"
        alternateContact:
          $ref: "#/components/schemas/AlternateContact"
        householdMember:
          type: array
          items:
            $ref: "#/components/schemas/HouseholdMember"
        preferences:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMultiselectQuestion"
        programs:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMultiselectQuestion"
        applicationLotteryPositions:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationLotteryPosition"
        listings:
          $ref: "#/components/schemas/Listing"
      required:
        - id
        - createdAt
        - updatedAt
        - contactPreferences
        - householdSize
        - status
        - submissionType
        - markedAsDuplicate
        - confirmationCode
        - applicationsMailingAddress
        - applicationsAlternateAddress
        - accessibility
        - demographics
        - preferredUnitTypes
        - applicant
        - alternateContact
        - householdMember
        - applicationLotteryPositions
        - listings
    PublicAppsCount:
      type: object
      properties:
        total:
          type: number
        lottery:
          type: number
        closed:
          type: number
        open:
          type: number
      required:
        - total
        - lottery
        - closed
        - open
    PublicAppsViewResponse:
      type: object
      properties:
        displayApplications:
          type: array
          items:
            $ref: "#/components/schemas/PublicAppsFiltered"
        applicationsCount:
          $ref: "#/components/schemas/PublicAppsCount"
      required:
        - displayApplications
        - applicationsCount
    ApplicantUpdate:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        birthMonth:
          type: string
        birthDay:
          type: string
        birthYear:
          type: string
        emailAddress:
          type: string
        noEmail:
          type: boolean
        phoneNumber:
          type: string
        phoneNumberType:
          type: string
        noPhone:
          type: boolean
        workInRegion:
          $ref: "#/components/schemas/YesNoEnum"
        applicantAddress:
          $ref: "#/components/schemas/AddressCreate"
        applicantWorkAddress:
          $ref: "#/components/schemas/AddressCreate"
      required:
        - applicantAddress
        - applicantWorkAddress
    AlternateContactUpdate:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/AlternateContactRelationship"
        otherType:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        agency:
          type: string
        phoneNumber:
          type: string
        emailAddress:
          type: string
        address:
          $ref: "#/components/schemas/AddressCreate"
      required:
        - address
    AccessibilityUpdate:
      type: object
      properties:
        mobility:
          type: boolean
        vision:
          type: boolean
        hearing:
          type: boolean
    DemographicUpdate:
      type: object
      properties:
        ethnicity:
          type: string
        gender:
          type: string
        sexualOrientation:
          type: string
        howDidYouHear:
          type: array
          items:
            type: string
        race:
          type: array
          items:
            type: string
        spokenLanguage:
          type: string
    HouseholdMemberUpdate:
      type: object
      properties:
        orderId:
          type: number
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        birthMonth:
          type: string
        birthDay:
          type: string
        birthYear:
          type: string
        sameAddress:
          $ref: "#/components/schemas/YesNoEnum"
        relationship:
          $ref: "#/components/schemas/HouseholdMemberRelationship"
        workInRegion:
          $ref: "#/components/schemas/YesNoEnum"
        id:
          type: string
        householdMemberAddress:
          $ref: "#/components/schemas/AddressCreate"
        householdMemberWorkAddress:
          $ref: "#/components/schemas/AddressCreate"
      required:
        - householdMemberAddress
    ApplicationCreate:
      type: object
      properties:
        appUrl:
          type: string
        additionalPhone:
          type: boolean
        additionalPhoneNumber:
          type: string
        additionalPhoneNumberType:
          type: string
        contactPreferences:
          type: array
          items:
            type: string
        householdSize:
          type: number
        housingStatus:
          type: string
        sendMailToMailingAddress:
          type: boolean
        householdExpectingChanges:
          type: boolean
        householdStudent:
          type: boolean
        incomeVouchers:
          type: array
          items:
            type: string
        income:
          type: string
        incomePeriod:
          $ref: "#/components/schemas/IncomePeriodEnum"
        status:
          $ref: "#/components/schemas/ApplicationStatusEnum"
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        acceptedTerms:
          type: boolean
        submissionType:
          $ref: "#/components/schemas/ApplicationSubmissionTypeEnum"
        submissionDate:
          format: date-time
          type: string
        receivedBy:
          type: string
        receivedAt:
          format: date-time
          type: string
        reviewStatus:
          $ref: "#/components/schemas/ApplicationReviewStatusEnum"
        preferences:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMultiselectQuestion"
        programs:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMultiselectQuestion"
        listings:
          $ref: "#/components/schemas/IdDTO"
        applicant:
          $ref: "#/components/schemas/ApplicantUpdate"
        applicationsMailingAddress:
          $ref: "#/components/schemas/AddressCreate"
        applicationsAlternateAddress:
          $ref: "#/components/schemas/AddressCreate"
        alternateContact:
          $ref: "#/components/schemas/AlternateContactUpdate"
        accessibility:
          $ref: "#/components/schemas/AccessibilityUpdate"
        demographics:
          $ref: "#/components/schemas/DemographicUpdate"
        householdMember:
          type: array
          items:
            $ref: "#/components/schemas/HouseholdMemberUpdate"
        preferredUnitTypes:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
      required:
        - contactPreferences
        - householdSize
        - status
        - submissionType
        - listings
        - applicant
        - applicationsMailingAddress
        - applicationsAlternateAddress
        - alternateContact
        - accessibility
        - demographics
        - householdMember
        - preferredUnitTypes
    ApplicationUpdate:
      type: object
      properties:
        id:
          type: string
        appUrl:
          type: string
        additionalPhone:
          type: boolean
        additionalPhoneNumber:
          type: string
        additionalPhoneNumberType:
          type: string
        contactPreferences:
          type: array
          items:
            type: string
        householdSize:
          type: number
        housingStatus:
          type: string
        sendMailToMailingAddress:
          type: boolean
        householdExpectingChanges:
          type: boolean
        householdStudent:
          type: boolean
        incomeVouchers:
          type: array
          items:
            type: string
        income:
          type: string
        incomePeriod:
          $ref: "#/components/schemas/IncomePeriodEnum"
        status:
          $ref: "#/components/schemas/ApplicationStatusEnum"
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        acceptedTerms:
          type: boolean
        submissionType:
          $ref: "#/components/schemas/ApplicationSubmissionTypeEnum"
        submissionDate:
          format: date-time
          type: string
        receivedBy:
          type: string
        receivedAt:
          format: date-time
          type: string
        reviewStatus:
          $ref: "#/components/schemas/ApplicationReviewStatusEnum"
        preferences:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMultiselectQuestion"
        programs:
          type: array
          items:
            $ref: "#/components/schemas/ApplicationMultiselectQuestion"
        listings:
          $ref: "#/components/schemas/IdDTO"
        applicant:
          $ref: "#/components/schemas/ApplicantUpdate"
        applicationsMailingAddress:
          $ref: "#/components/schemas/AddressCreate"
        applicationsAlternateAddress:
          $ref: "#/components/schemas/AddressCreate"
        alternateContact:
          $ref: "#/components/schemas/AlternateContactUpdate"
        accessibility:
          $ref: "#/components/schemas/AccessibilityUpdate"
        demographics:
          $ref: "#/components/schemas/DemographicUpdate"
        householdMember:
          type: array
          items:
            $ref: "#/components/schemas/HouseholdMemberUpdate"
        preferredUnitTypes:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
      required:
        - id
        - contactPreferences
        - householdSize
        - status
        - submissionType
        - listings
        - applicant
        - applicationsMailingAddress
        - applicationsAlternateAddress
        - alternateContact
        - accessibility
        - demographics
        - householdMember
        - preferredUnitTypes
    CreatePresignedUploadMetadata:
      type: object
      properties:
        parametersToSign:
          type: object
      required:
        - parametersToSign
    EmailAndAppUrl:
      type: object
      properties:
        email:
          type: string
        appUrl:
          type: string
      required:
        - email
    UserRole:
      type: object
      properties:
        isAdmin:
          type: boolean
        isJurisdictionalAdmin:
          type: boolean
        isLimitedJurisdictionalAdmin:
          type: boolean
        isPartner:
          type: boolean
    User:
      type: object
      properties:
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        passwordUpdatedAt:
          format: date-time
          type: string
        passwordValidForDays:
          type: number
        confirmedAt:
          format: date-time
          type: string
        email:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        dob:
          format: date-time
          type: string
        phoneNumber:
          type: string
        listings:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        userRoles:
          $ref: "#/components/schemas/UserRole"
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        jurisdictions:
          type: array
          items:
            $ref: "#/components/schemas/Jurisdiction"
        mfaEnabled:
          type: boolean
        lastLoginAt:
          format: date-time
          type: string
        failedLoginAttemptsCount:
          type: number
        phoneNumberVerified:
          type: boolean
        agreedToTermsOfService:
          type: boolean
        hitConfirmationURL:
          format: date-time
          type: string
        activeAccessToken:
          type: string
        activeRefreshToken:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - passwordUpdatedAt
        - passwordValidForDays
        - email
        - firstName
        - lastName
        - listings
        - jurisdictions
        - agreedToTermsOfService
    UserFilterParams:
      type: object
      properties:
        isPortalUser:
          type: boolean
          example: true
    PaginatedUserDto:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/User"
        meta:
          $ref: "#/components/schemas/PaginationMeta"
      required:
        - items
        - meta
    UserUpdate:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        dob:
          format: date-time
          type: string
        phoneNumber:
          type: string
        listings:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        userRoles:
          $ref: "#/components/schemas/UserRole"
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        agreedToTermsOfService:
          type: boolean
        email:
          type: string
        newEmail:
          type: string
        password:
          type: string
        currentPassword:
          type: string
        appUrl:
          type: string
        jurisdictions:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
      required:
        - id
        - firstName
        - lastName
        - listings
        - agreedToTermsOfService
    UserCreate:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        dob:
          format: date-time
          type: string
        phoneNumber:
          type: string
        listings:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        agreedToTermsOfService:
          type: boolean
        newEmail:
          type: string
        appUrl:
          type: string
        password:
          type: string
        passwordConfirmation:
          type: string
        email:
          type: string
        emailConfirmation:
          type: string
        jurisdictions:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
      required:
        - firstName
        - lastName
        - listings
        - agreedToTermsOfService
        - password
        - passwordConfirmation
        - email
    UserInvite:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        dob:
          format: date-time
          type: string
        phoneNumber:
          type: string
        listings:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
        userRoles:
          $ref: "#/components/schemas/UserRole"
        language:
          $ref: "#/components/schemas/LanguagesEnum"
        newEmail:
          type: string
        appUrl:
          type: string
        email:
          type: string
        jurisdictions:
          type: array
          items:
            $ref: "#/components/schemas/IdDTO"
      required:
        - firstName
        - lastName
        - listings
        - email
        - jurisdictions
    RequestSingleUseCode:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    ConfirmationRequest:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    MfaType:
      type: string
      enum:
        - sms
        - email
    Login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        mfaCode:
          type: string
        mfaType:
          $ref: "#/components/schemas/MfaType"
        reCaptchaToken:
          type: string
      required:
        - email
        - password
    LoginViaSingleUseCode:
      type: object
      properties:
        email:
          type: string
        singleUseCode:
          type: string
      required:
        - email
        - singleUseCode
    RequestMfaCode:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        mfaType:
          $ref: "#/components/schemas/MfaType"
        phoneNumber:
          type: string
      required:
        - email
        - password
        - mfaType
    RequestMfaCodeResponse:
      type: object
      properties:
        phoneNumber:
          type: string
        email:
          type: string
        phoneNumberVerified:
          type: boolean
    UpdatePassword:
      type: object
      properties:
        password:
          type: string
        passwordConfirmation:
          type: string
        token:
          type: string
      required:
        - password
        - passwordConfirmation
        - token
    Confirm:
      type: object
      properties:
        token:
          type: string
        password:
          type: string
      required:
        - token
    MapLayerDto:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        jurisdictionId:
          type: string
      required:
        - id
        - name
        - jurisdictionId
    DataTransferDTO:
      type: object
      properties:
        connectionString:
          type: string
        jurisdiction:
          type: string
      required:
        - connectionString
        - jurisdiction
    AmiChartImportDTO:
      type: object
      properties:
        values:
          type: string
        name:
          type: string
        jurisdictionId:
          type: string
      required:
        - values
        - name
        - jurisdictionId
    ApplicationCsvQueryParams:
      type: object
      properties:
        id:
          type: string
        includeDemographics:
          type: boolean
          example: true
        timeZone:
          type: string
          example: America/Los_Angeles
      required:
        - id
    ListingLotteryStatus:
      type: object
      properties:
        id:
          type: string
        lotteryStatus:
          $ref: "#/components/schemas/LotteryStatusEnum"
      required:
        - id
        - lotteryStatus
    LotteryActivityLogItem:
      type: object
      properties:
        status:
          type: string
        name:
          type: string
        logDate:
          format: date-time
          type: string
      required:
        - status
        - name
        - logDate
    PublicLotteryResult:
      type: object
      properties:
        ordinal:
          type: number
        multiselectQuestionId:
          type: string
      required:
        - ordinal
    PublicLotteryTotal:
      type: object
      properties:
        total:
          type: number
        multiselectQuestionId:
          type: string
      required:
        - total
